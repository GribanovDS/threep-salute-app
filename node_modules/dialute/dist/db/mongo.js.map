{"version":3,"file":"mongo.js","sourceRoot":"","sources":["../../src/db/mongo.ts"],"names":[],"mappings":";;;;AAAA,4BAA0B;AAE1B,qCAAoE;AAQpE,oGAAoG;AACpG,sCAAsC;AACtC,EAAE;AACF,0CAA0C;AAC1C,kCAAkC;AAClC,EAAE;AACF,2CAA2C;AAC3C,EAAE;AACF,gDAAgD;AAChD,oBAAoB;AACpB,4CAA4C;AAC5C,sDAAsD;AACtD,4CAA4C;AAC5C,iDAAiD;AACjD,8CAA8C;AAC9C,gCAAgC;AAChC,kBAAkB;AAClB,MAAM;AACN,EAAE;AACF,uBAAuB;AACvB,IAAI;AAEJ,MAAa,KAAK;IAOhB,YAAY,MAAiB;QAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAE5B,mJAAmJ;QACnJ,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAW,CAAC,IAAI,CAAC,GAAG,EAAE;YACtC,yBAAyB;YACzB,4BAA4B;YAC5B,SAAS,EAAE,0BAAgB,CAAC,EAAE;SAC/B,CAAC,CAAC;IACL,CAAC;IAEK,aAAa;;YACjB,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;YAChD,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAC3D,CAAC;KAAA;IAEK,WAAW;;YACf,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;YACxB,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC;KAAA;IAEK,OAAO,CAAC,EAAU;;YACtB,IAAI,GAAG,GAAG,EAAE,CAAC;YAEb,IAAI;gBACF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;gBAC9C,GAAG,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;gBAC5C,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;aAC1B;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,CAAC,CAAC,CAAC;aACrD;YAED,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;IAEK,OAAO,CAAC,EAAU,EAAE,IAAS;;YACjC,IAAI;gBACF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;gBAC9C,MAAM,UAAU,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC1E,OAAO,IAAI,CAAC;aAEb;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,CAAC,CAAC,CAAC;aACrD;YACD,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;CACF;AAtDD,sBAsDC","sourcesContent":["import 'reflect-metadata';\nimport type { Db } from './types';\nimport { Collection, MongoClient, ServerApiVersion } from 'mongodb';\n\nexport interface MongoInit {\n  uri: string;\n  dbName: string;\n  collectionName: string;\n}\n\n// const getCollection = (target: Object, propertyKey: string, descriptor: PropertyDescriptor) =>  {\n//   console.log('decorator:', target)\n//\n//   const childMethod = descriptor.value;\n//   console.log('out this', this)\n//\n//   descriptor.value = (...args: any) => {\n//\n//     // await (this as Mongo).client.connect()\n//     // @ts-ignore\n//     console.log('connect this', this.uri)\n//     console.log('descriptor this', descriptor.this)\n//     console.log('connect target', target)\n//     const res = childMethod.apply(this, args);\n//     // await (this as Mongo).client.close()\n//     console.log('disconnect')\n//     return res;\n//   }\n//\n//   return descriptor;\n// }\n\nexport class Mongo implements MongoInit, Db {\n  uri: string;\n  dbName: string;\n  collectionName: string;\n\n  client: MongoClient;\n\n  constructor(params: MongoInit) {\n    Object.assign(this, params);\n\n    // const uri = `mongodb+srv://${process.env.MONGO_USERNAME}:${process.env.MONGO_PASSWORD}@cluster0.qij1g.mongodb.net/?retryWrites=true&w=majority`;\n    this.client = new MongoClient(this.uri, {\n      // useNewUrlParser: true,\n      // useUnifiedTopology: true,\n      serverApi: ServerApiVersion.v1,\n    });\n  }\n\n  async getCollection(): Promise<Collection> {\n    const { client, dbName, collectionName } = this;\n    await client.connect();\n    return this.client.db(dbName).collection(collectionName);\n  }\n\n  async closeClient() {\n    const { client } = this;\n    await client.close();\n  }\n\n  async getById(id: string): Promise<any> {\n    let res = {};\n\n    try {\n      const collection = await this.getCollection();\n      res = await collection.findOne({ _id: id });\n      await this.closeClient();\n    } catch (e) {\n      console.log('Error happened during DB request:', e);\n    }\n\n    return res;\n  }\n\n  async setById(id: string, data: any): Promise<any> {\n    try {\n      const collection = await this.getCollection();\n      await collection.updateOne({ _id: id }, { $set: data }, { upsert: true });\n      return true;\n\n    } catch (e) {\n      console.log('Error happened during DB request:', e);\n    }\n    return true;\n  }\n}\n"]}