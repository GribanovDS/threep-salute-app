"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mongo = void 0;
const tslib_1 = require("tslib");
require("reflect-metadata");
const mongodb_1 = require("mongodb");
// const getCollection = (target: Object, propertyKey: string, descriptor: PropertyDescriptor) =>  {
//   console.log('decorator:', target)
//
//   const childMethod = descriptor.value;
//   console.log('out this', this)
//
//   descriptor.value = (...args: any) => {
//
//     // await (this as Mongo).client.connect()
//     // @ts-ignore
//     console.log('connect this', this.uri)
//     console.log('descriptor this', descriptor.this)
//     console.log('connect target', target)
//     const res = childMethod.apply(this, args);
//     // await (this as Mongo).client.close()
//     console.log('disconnect')
//     return res;
//   }
//
//   return descriptor;
// }
class Mongo {
    constructor(params) {
        Object.assign(this, params);
        // const uri = `mongodb+srv://${process.env.MONGO_USERNAME}:${process.env.MONGO_PASSWORD}@cluster0.qij1g.mongodb.net/?retryWrites=true&w=majority`;
        this.client = new mongodb_1.MongoClient(this.uri, {
            // useNewUrlParser: true,
            // useUnifiedTopology: true,
            serverApi: mongodb_1.ServerApiVersion.v1,
        });
    }
    getCollection() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { client, dbName, collectionName } = this;
            yield client.connect();
            return this.client.db(dbName).collection(collectionName);
        });
    }
    closeClient() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { client } = this;
            yield client.close();
        });
    }
    getById(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let res = {};
            try {
                const collection = yield this.getCollection();
                res = yield collection.findOne({ _id: id });
                yield this.closeClient();
            }
            catch (e) {
                console.log('Error happened during DB request:', e);
            }
            return res;
        });
    }
    setById(id, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const collection = yield this.getCollection();
                yield collection.updateOne({ _id: id }, { $set: data }, { upsert: true });
                return true;
            }
            catch (e) {
                console.log('Error happened during DB request:', e);
            }
            return true;
        });
    }
}
exports.Mongo = Mongo;
//# sourceMappingURL=mongo.js.map